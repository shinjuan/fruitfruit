<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.project_03.admin.AdminMapper">

    <insert id="insertProduct" parameterType="java.util.Map">
        INSERT INTO product (category_id, name, price, rate, stock_quantity, content)
        VALUES (#{sort}, #{productName}, #{price}, #{discount}, #{stock}, #{description})
    </insert>

    <insert id="insertPhoto" parameterType="java.util.Map">
        INSERT INTO product_image (product_id, origin_name, file_name, file_size)
        VALUES (
        <choose>
            <when test="productName != null">
                (SELECT id FROM product WHERE name = #{productName})
            </when>
            <otherwise>
                #{product_id}
            </otherwise>
        </choose>,
        #{originName}, #{firebaseUrl}, #{fileSize}
        )
    </insert>

    <select id="countProducts" resultType="int">
        SELECT COUNT(*) AS total_count
        FROM product product
        JOIN category category ON product.category_id = category.id
        <where>

            <if test="selectedStatus != null and selectedStatus != ''">
                    AND product.status = #{selectedStatus}
                </if>

            <if test="selectedCategory != null and selectedCategory != ''">
                AND category_name = #{selectedCategory}
            </if>
            <if test="searchKeyword != null and searchKeyword != ''">
                AND product.name LIKE CONCAT('%', #{searchKeyword}, '%')
            </if>
            AND (product.status = 1 OR product.status = 2 OR product.status = 3)
        </where>
    </select>


    <select id="selectProductList" resultType="java.util.Map">


        SELECT
        product.id,
        CASE product.status
        WHEN 1 THEN 'sale'
        WHEN 2 THEN 'stop sale'
        WHEN 3 THEN 'sold out'

        END AS status,
        product.name,
        product.price,
        product.rate,
        product.created_at,
        product.updated_at,
        category.category_name,
        product_image.file_name,
        <if test="email != null || email != ''">
            CASE
            WHEN likes.product_id IS NOT NULL THEN 'liked'
            ELSE 'not liked'
            END AS like_status,
            CASE
            WHEN carts.product_id IS NOT NULL THEN 'carted'
            ELSE 'not carted'
            END AS cart_status,
            COALESCE(carts.cart_count, 0) AS cart_count -- cart_count 컬럼 값이 null인 경우 0으로 대체
        </if>
        FROM product
        JOIN category
        ON product.category_id = category.id
        LEFT JOIN product_image product_image ON product.id = product_image.product_id
        <if test="email != null || email != ''">
            LEFT JOIN likes ON product.id = likes.product_id AND likes.user_email = #{email}
            LEFT JOIN carts ON product.id = carts.product_id AND carts.user_email = #{email}
        </if>

        <where>
            <if test="selectedStatus != null and selectedStatus != ''">
                product.status = #{selectedStatus}
            </if>
            <if test="selectedCategory != null and selectedCategory != ''">
                AND category_name = #{selectedCategory}
            </if>
            <if test="searchKeyword != null and searchKeyword != ''">
                AND product.name LIKE CONCAT('%', #{searchKeyword}, '%')
            </if>
            AND (product.status = 1 OR product.status = 2 OR product.status = 3)
        </where>

        ORDER BY product.id DESC


    </select>

    <select id="selectProductListAll" resultType="java.util.Map">

        SELECT
        product.id,
        CASE product.status
        WHEN 1 THEN 'sale'
        WHEN 2 THEN 'stop sale'
        WHEN 3 THEN 'sold out'
        END AS status,
        product.name,
        product.price,
        product.rate,
        product.created_at,
        product.updated_at,
        category.category_name,
        product_image.file_name,
        <if test="email != null || email != ''">
            CASE
            WHEN likes.product_id IS NOT NULL THEN 'liked'
            ELSE 'not liked'
            END AS like_status,
            CASE
            WHEN carts.product_id IS NOT NULL THEN 'carted'
            ELSE 'not carted'
            END AS cart_status,
            COALESCE(carts.cart_count, 1) AS cart_count -- cart_count 컬럼 값이 null인 경우 1으로 대체
        </if>
        FROM product
        JOIN category ON product.category_id = category.id
        LEFT JOIN product_image ON product.id = product_image.product_id
        <if test="email != null || email != ''">
            LEFT JOIN likes ON product.id = likes.product_id AND likes.user_email = #{email}
            LEFT JOIN carts ON product.id = carts.product_id AND carts.user_email = #{email}
        </if>
        WHERE product.status = 1 OR product.status = 2 OR product.status = 3
        ORDER BY product.id DESC


    </select>

    <select id="selectProductListAll_excel" resultType="java.util.Map">

        SELECT
            product.id as 번호,
            product.status as 상태,
            product.name as 상품명,
            product.price as 상품금액,
            product.rate as 할인율,
            product.created_at as 등록일,
            product.updated_at as 상품수정,
            category.category_name as 분류
        FROM product product
                 JOIN category category
                      ON product.category_id = category.id
        WHERE product.status = 1 OR product.status = 2 OR product.status = 3
        ORDER BY product.id DESC


    </select>

    <select id="countProductAll" resultType="java.util.Map">
        SELECT
            COUNT(*) AS count
        FROM product product
            JOIN category category ON product.category_id = category.id
        WHERE product.status = 1 OR product.status = 2 OR product.status = 3
    </select>

    <select id="countCartList" resultType="string" parameterType="string">
        SELECT
            COUNT(*) AS cart_total
        FROM carts
        where user_email = '${loggedInEmail}'
    </select>

    <select id="countLikeList" resultType="string" parameterType="string">
        SELECT
            COUNT(*) AS like_total
        FROM likes
        where user_email = '${loggedInEmail}'
    </select>


    <update id="saleStopList" parameterType="java.util.Map">
        UPDATE product
        SET status = 2
        WHERE id IN
        <foreach collection="selectedIds" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>

    <update id="saleStop" parameterType="java.util.Map">
        UPDATE product
        SET status = 2
        WHERE id = #{selectedIds3}

    </update>

    <update id="productDelete" parameterType="java.util.Map">
        UPDATE product
        SET status = 4
        WHERE id IN
        <foreach collection="selectedIds2" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>

    <select id="countStatus">
        SELECT
            SUM(CASE WHEN status IN (1, 2, 3) THEN 1 ELSE 0 END) AS total_count,
            SUM(CASE WHEN status = 1 THEN 1 ELSE 0 END) AS status_1_count,
            SUM(CASE WHEN status = 2 THEN 1 ELSE 0 END) AS status_2_count,
            SUM(CASE WHEN status = 3 THEN 1 ELSE 0 END) AS status_3_count
        FROM
            product

    </select>

    <select id="getProductInfo" resultType="String">
        select * from product where id=#{id}

    </select>

    <select id="likeCheck" resultType="String">
        select * from likes where user_email = #{email} and product_id = #{productId}

    </select>

    <delete id="likeDelete" parameterType="java.util.Map">
        DELETE FROM likes
        WHERE user_email = #{email}
          AND product_id = #{productId}

    </delete>

    <insert id="likeAdd" parameterType="java.util.Map">
        INSERT INTO likes (user_email, product_id)
        VALUES (#{email}, #{productId})

    </insert>

    <select id="cartCheck" resultType="String">
        select * from carts where user_email = #{email} and product_id = #{productId}

    </select>

    <delete id="cartDelete" parameterType="java.util.Map">
        DELETE FROM carts
        WHERE user_email = #{email}
          AND product_id = #{productId}

    </delete>

    <insert id="cartAdd" parameterType="java.util.Map">
        INSERT INTO carts (user_email, product_id, cart_count)
        VALUES (#{email}, #{productId}, #{quantity})

    </insert>

    <update id="cartUpdate" parameterType="java.util.Map">
        update carts set cart_count = #{quantity} where product_id = #{productId}

    </update>

    <update id="updateReviewReply">
        UPDATE review SET review_reply=#{review_text} where id=#{review_id}
    </update>


    <select id="selectReviewListAll" resultType="java.util.Map">

        SELECT
        r.id AS review_id,
        r.product_id,
        p.name AS product_name,
        r.user_email,
        r.review_text,
        r.review_reply,
        r.created_at,
        r.updated_at,
        CASE
        WHEN r.review_reply IS NULL OR r.review_reply = '' THEN '미답변'
        ELSE '답변완료'
        END AS status,
        CASE
        WHEN r.review_reply IS NULL OR r.review_reply = '' THEN '답변등록'
        ELSE '답변보기'
        END AS reply_registration
        FROM
        review r
        JOIN
        product p ON r.product_id = p.id



    </select>

    <select id="selectOneReview" resultType="java.util.Map">

        SELECT
            r.id AS review_id,
            r.product_id,
            p.name AS product_name,
            r.user_email,
            r.review_text,
            r.review_reply,
            r.created_at,
            r.updated_at,
            CASE
                WHEN r.review_reply IS NULL OR r.review_reply = '' THEN '미답변'
                ELSE '답변완료'
                END AS status,
            CASE
                WHEN r.review_reply IS NULL OR r.review_reply = '' THEN '답변등록'
                ELSE '답변보기'
                END AS reply_registration
        FROM
            review r
                JOIN
            product p ON r.product_id = p.id
        WHERE
            r.id = #{reviewId}



    </select>

    <select id="selectSearchReviewList" resultType="java.util.Map">

        SELECT
            r.id AS review_id,
            r.product_id,
            p.name AS product_name,
            r.user_email,
            r.review_text,
            r.review_reply,
            r.created_at,
            r.updated_at,
            CASE
                WHEN r.review_reply IS NULL OR r.review_reply = '' THEN '미답변'
                ELSE '답변완료'
                END AS status,
            CASE
                WHEN r.review_reply IS NULL OR r.review_reply = '' THEN '답변등록'
                ELSE '답변보기'
                END AS reply_registration
        FROM
            review r
                JOIN
            product p ON r.product_id = p.id
        <where>
            <!-- date1과 date2가 주어진 경우 -->
            <if test="date1 != null and date2 != null">
                AND r.created_at <![CDATA[>=]]> #{date1}   AND r.created_at <![CDATA[<=]]> #{date2}
            </if>

            <!-- buttonStatus가 주어진 경우 -->
            <if test="buttonStatus != null and buttonStatus !=''">
                AND (CASE
                WHEN r.review_reply IS NULL OR r.review_reply = '' THEN '미답변'
                ELSE '답변완료'
                END) = #{buttonStatus}
            </if>
            <!-- searchType이 productName인 경우 -->
            <if test="reviews == 'productName' and searchInput != ''">
                AND p.name LIKE CONCAT('%', #{searchInput}, '%')

            </if>
            <!-- searchType이 userId인 경우 -->
            <if test="reviews == 'userId' and searchInput != ''">
                AND r.user_email LIKE CONCAT('%', #{searchInput}, '%')
            </if>

        </where>


    </select>


</mapper>
