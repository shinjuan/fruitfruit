<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.project_03.user.UserMapper">

    <select id="emailChk" parameterType="java.util.Map">
        select * from user where email=#{email}
    </select>

    <select id="nicknameChk" parameterType="java.util.Map">
        select * from user where nickname=#{nickname}
    </select>

    <insert id="insertMember" parameterType="java.util.Map">
        INSERT INTO USER (email, nickname, password)
        VALUES (#{email}, #{nickname}, #{encodedPassword})
    </insert>

    <insert id="insertOrder" parameterType="java.util.Map">
        INSERT INTO orders (deliver_id, order_type, card_type, card_name, card_installment, requirement, order_price)
        VALUES (#{selectedValue}, '신용카드', #{cardType}, #{card}, #{howlong}, #{selectedAsk}, #{pay})
    </insert>


    <insert id="insertReview" parameterType="java.util.Map">
        INSERT INTO review (product_id, user_email, review_text, created_at, updated_at)
        VALUES
            (#{product_id}, #{user_email}, #{review_text}, NOW(), NOW());

    </insert>


    <insert id="insertDelivery" parameterType="java.util.Map">
        INSERT INTO deliver (user_email, place, name, phone, postcode, address, detail_address)
        VALUES (#{email}, #{title}, #{name}, #{phone1}, #{postCode}, #{roadAddr}, #{detailAddr})
    </insert>


    <insert id="insertMemberTerm" parameterType="java.util.Map">
        INSERT INTO USER_TERM (user_email, term_id)
        VALUES
        <foreach collection="status" item="termId" separator=",">
            (#{email}, #{termId})
        </foreach>
    </insert>

   <update id="changePwd">
       UPDATE USER SET password=#{encodedPassword2} where email=#{email}
  </update>

    <select id="selectProductDetail" parameterType="java.util.Map">
        SELECT
        p.id,
        p.name,
        p.price,
        p.rate,
        p.stock_quantity,
        p.content,
        pi.file_name
        <if test="email != null || email != ''">
            , CASE
            WHEN likes.product_id IS NOT NULL THEN 'liked'
            ELSE 'not liked'
            END AS like_status,
            CASE
            WHEN carts.product_id IS NOT NULL THEN 'carted'
            ELSE 'not carted'
            END AS cart_status,
            COALESCE(carts.cart_count, 0) AS cart_count
        </if>
        FROM
        product p
        JOIN product_image pi ON p.id = pi.product_id
        <if test="email != null || email != ''">
            LEFT JOIN likes ON p.id = likes.product_id AND likes.user_email = #{email}
            LEFT JOIN carts ON p.id = carts.product_id AND carts.user_email = #{email}
        </if>
        WHERE p.id = ${product_no}
    </select>

    <select id="selectCartList" parameterType="java.util.Map">
        SELECT
            pi.file_name,
            p.price,
            p.stock_quantity,
            p.rate,
            p.name,
            p.id,
            c.cart_count
        FROM
            carts c
                JOIN product p ON c.product_id = p.id
                JOIN product_image pi ON p.id = pi.product_id
        WHERE
            c.user_email = '${email}'
    </select>

    <select id="countCarted" resultType="java.util.Map">
        SELECT
            COUNT(*) AS carted_count
        FROM carts
        where user_email = '${email}'
    </select>

    <select id="selectFirstCart" resultType="java.util.Map">
        SELECT
        p.name,
        pi.file_name
    FROM product p
    JOIN product_image pi ON p.id = pi.product_id
        where p.id = ${firstProductId}
    </select>


    <select id="selectCheckboxCartList" resultType="java.util.Map">
        SELECT p.id, pi.file_name, p.name, p.price, c.cart_count, p.rate
        FROM product p
        INNER JOIN product_image pi ON p.id = pi.product_id
        INNER JOIN carts c ON p.id = c.product_id
        WHERE c.user_email = #{email}
        <!-- checkbox 리스트의 값을 동적으로 바인딩 -->
        <foreach collection="checkbox" item="productId" open="AND p.id IN (" close=")" separator=",">
            #{productId}
        </foreach>
    </select>

    <select id="selectReviewList" parameterType="java.util.Map">
        select * from review where product_id=#{productNo}
    </select>


    <select id="selectBasicDeliver" parameterType="java.util.Map">
        select * from deliver where user_email=#{email} and place='우리집(기본배송지)' and status='use'
    </select>

    <select id="selectDeliverList" parameterType="java.util.Map">
        SELECT * FROM deliver
        WHERE user_email = #{email} and status='use'
          AND place != '우리집(기본배송지)'
    </select>

    <select id="selectDeliverAllList" parameterType="java.util.Map">
        SELECT * FROM deliver
        WHERE user_email = #{email} and status='use'
    </select>

    <select id="selectDelivery" parameterType="java.util.Map">
        SELECT * FROM deliver
        WHERE user_email = #{email}
          AND place = #{selectedValue} and status='use'
    </select>

    <select id="countDelivery" resultType="Integer">
        SELECT COUNT(*) FROM deliver
        WHERE user_email = #{email} and status='use'

    </select>


    <update id="updateDelivery">
        UPDATE deliver
        SET
            place = #{title}
          , name = #{name}
          , phone = #{phone1}
          , postcode = #{postCode}
          , address = #{roadAddr}
          , detail_address = #{detailAddr}
        WHERE id = #{buttonValue} and user_email = #{email}
    </update>

    <update id="deleteDelivery">
        UPDATE deliver
        SET
            status = 'deleted'
        WHERE id = #{buttonValue} and user_email = #{email}
    </update>

    <select id="reviewCheckConfirm" parameterType="java.util.Map">
        select * from review where user_email=#{email} and product_id = #{product_no}
    </select>

    <select id="payCheckConfirm" parameterType="java.util.Map">
        SELECT op.*
        FROM order_product op
                 INNER JOIN orders o ON op.order_id = o.id
                 INNER JOIN deliver d ON o.deliver_id = d.id
        WHERE d.user_email = #{email} and product_id = #{product_no}
    </select>


    <select id="selectPaymentList" parameterType="java.util.Map">
        SELECT op.*
        FROM order_product op
                 INNER JOIN orders o ON op.order_id = o.id
                 INNER JOIN deliver d ON o.deliver_id = d.id
        WHERE d.user_email = #{email}
    </select>

    <select id="selectSearchPaymentList" parameterType="java.util.Map">
        SELECT op.*
        FROM order_product op
        INNER JOIN orders o ON op.order_id = o.id
        INNER JOIN deliver d ON o.deliver_id = d.id
        <where>
            <!-- date1과 date2가 주어진 경우 -->
            <if test="date1 != null and date2 != null">
                AND op.created_at <![CDATA[>=]]> #{date1}   AND op.created_at <![CDATA[<=]]> #{date2}
            </if>
            <!-- searchType이 productName인 경우 -->
            <if test="searchType == 'productName' and searchInput != ''">
                AND op.name LIKE CONCAT('%', #{searchInput}, '%')

            </if>
            <!-- searchType이 orderNo인 경우 -->
            <if test="searchType == 'orderNo' and searchInput != ''">
                AND op.order_id LIKE CONCAT('%', #{searchInput}, '%')
            </if>
        </where>
    </select>


    <select id="selectOrderId" parameterType="java.util.Map">
        SELECT id
        FROM orders
        WHERE deliver_id IN (
            SELECT id
            FROM deliver
            WHERE user_email = '${email}'
        )
        ORDER BY created_at DESC
            LIMIT 1
    </select>

    <insert id="insertOrder_Product" parameterType="java.util.Map">
        INSERT INTO order_product (product_id, order_id, quantity, price, name, Image)
        VALUES
        <foreach collection="productIds" item="productId" index="idx" separator=",">
            (
            #{productId},
            #{order_id},
            #{productCounts[${idx}]},
            #{productPrices[${idx}]},
            #{productNames[${idx}]},
            #{productImgs[${idx}]}
            )
        </foreach>
    </insert>





</mapper>